AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 80 Garnet Street Strata infrastructure

Parameters:
  DeployEnv:
    Type: String
  PinpointProjectId:
    Type: String

Resources:
  LambdaCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Garnet Street Strata common libs
      ContentUri: ./LambdaCommonLayer
      CompatibleRuntimes:
        - python3.8

  SignUpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref DeployEnv
      CorsConfiguration:
        AllowMethods:
          - POST
          - DELETE
        AllowHeaders:
          - "*"
        AllowOrigins:
          - !Join ['', ['https://', !GetAtt 'CloudfrontDistribution.DomainName']]
          - 'http://localhost:8080'

  ApiEndpointRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
                Resource: [!Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"]
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                Resource: [!GetAtt "DistributionList.Arn"]
              - Effect: Allow
                Action: ['mobiletargeting:SendMessages']
                Resource: [!Sub "arn:${AWS::Partition}:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/${PinpointProjectId}/messages"]
              - Effect: Allow
                Action: [ssm:GetParameter]
                Resource: [!Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SignUpEndpoint/*"]

  SignUpEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Description: Accepts sign-up submissions
      Runtime: python3.8
      Layers:
        - !Ref 'LambdaCommonLayer'
      CodeUri: ./SignUpEndpoint
      Handler: app.lambda.handler
      Events:
        PostMessage:
          Type: HttpApi
          Properties:
            ApiId: !Ref SignUpApi
            Method: POST
            Path: /distributionList
      Role: !GetAtt 'ApiEndpointRole.Arn'
      Timeout: 8
      MemorySize: 128
      Environment:
        Variables:
          DEPLOY_ENV: !Ref DeployEnv
          DISTRIBUTION_LIST_TABLE_NAME: !Ref 'DistributionList'
          SIGN_UP_PASSCODE_KEY_ID: !Sub '/${AWS::StackName}/SignUpEndpoint/SignUpPasscode'
          PINPOINT_PROJECT_ID: !Ref PinpointProjectId

  OptOutEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      Description: Accepts opt-out submissions
      Runtime: python3.8
      Layers:
        - !Ref 'LambdaCommonLayer'
      CodeUri: ./OptOutEndpoint
      Handler: app.lambda.handler
      Events:
        DeleteMessage:
          Type: HttpApi
          Properties:
            ApiId: !Ref SignUpApi
            Method: DELETE
            Path: /distributionList/{proxy+}
      Role: !GetAtt 'ApiEndpointRole.Arn'
      Timeout: 8
      MemorySize: 128
      Environment:
        Variables:
          DEPLOY_ENV: !Ref DeployEnv
          DISTRIBUTION_LIST_TABLE_NAME: !Ref 'DistributionList'

  SendNotice:
    Type: AWS::Serverless::Function
    Properties:
      Description: Sends a notice to the specified endpoints
      Runtime: python3.8
      Layers:
        - !Ref 'LambdaCommonLayer'
      CodeUri: ./SendNotice
      Handler: app.lambda.handler
      Role: !GetAtt 'SendNoticeRole.Arn'
      Timeout: 8
      MemorySize: 128
      Environment:
        Variables:
          DEPLOY_ENV: !Ref DeployEnv
          DISTRIBUTION_LIST_TABLE_NAME: !Ref 'DistributionList'
          PINPOINT_PROJECT_ID: !Ref PinpointProjectId

  SendNoticeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource:
                  - !GetAtt "DistributionList.Arn"
              - Effect: Allow
                Action: ['mobiletargeting:SendMessages']
                Resource:
                  - !Sub "arn:${AWS::Partition}:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/${PinpointProjectId}/messages"

  DistributionList:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: DestinationAddress
          AttributeType: S
      KeySchema:
        - AttributeName: DestinationAddress
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: TRUE

  SignUpWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: strata80garnetstreet.com

  SignUpWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SignUpWebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${SignUpWebsiteBucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${SignUpWebsiteCloudFrontOAI}"

  SignUpWebsiteCloudFrontOAI:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Sign-up website Origin Access Identity'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Sign-up website Cloudfront distribution"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: s3-website
            DomainName: !GetAtt SignUpWebsiteBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${SignUpWebsiteCloudFrontOAI}'
        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
